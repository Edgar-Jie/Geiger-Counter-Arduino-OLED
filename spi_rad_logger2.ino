#include <Bounce2.h>
#include <SPI.h>
#include <Wire.h>                     //A4（SDA）和A5（SCL）
#include <Adafruit_GFX.h>             
#include <Adafruit_SSD1306.h>       
// #include <time.h>
#define LOG_PERIOD 15000  //记录周期
#define MAX_PERIOD 60000  //最大周期

#define LOG_PERIOD1 100  //波形图记录周期
#define MAX_PERIOD1 60000  //最大周期

#define OLED_RESET 5
Adafruit_SSD1306 display(OLED_RESET);

//#error("Height incorrect, please fix Adafruit_SSD1306.h!");

#define CONV_FACTOR 0.0066  // 转换系数 - CPM至uSV / h
/*SBM-20 0.0057
SBM-19 0.0021
SI-29BG 0.0082
SI-180G 0.0031
LND-712 0.0081 or 0.0100
LND-7317 0.0024
J305 0.0081
SBT11-A 0.0031
SBT-9 0.0117
SBT-10 0.0013
M4011-0.0066*/

 /*static const unsigned char PROGMEM lcd_bmp[] = //辐射图标
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x1C, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x0E, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x1F, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x1F, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x1F, 0xC0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xC0, 0x3F, 0xE0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x3F, 0xF0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x3F, 0xF0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0, 0x7F, 0xF8,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xE0, 0x7F, 0xF8,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xF8,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xF0, 0x7F, 0xF8,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xE0, 0x7F, 0xF8,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xC0, 0x3F, 0xF8,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x00, 0x03, 0xF8,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20, 0x40, 0x38,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x80, 0x08,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x09, 0x00, 0x08,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0F, 0x00, 0x08,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x1F, 0x80, 0x18,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0xC0, 0x10,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x7F, 0xC0, 0x30,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xFF, 0xE0, 0x20,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xFF, 0xF0, 0x40,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xF8, 0xC0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xF9, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFE, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFC, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
*/
/*static const unsigned char PROGMEM logo[] =
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x1C, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x0E, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x1F, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x1F, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x1F, 0xC0,
0x07, 0x9E, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x7F, 0xC0, 0x3F, 0xE0,
0x07, 0x9E, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0xFF, 0xC0, 0x3F, 0xF0,
0x07, 0x9E, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x00, 0x3F, 0xE0, 0x00, 0x00, 0xFF, 0xC0, 0x3F, 0xF0,
0x07, 0x9E, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x00, 0x3F, 0xF0, 0x00, 0x00, 0xFF, 0xE0, 0x7F, 0xF8,
0x07, 0x9E, 0x3E, 0x73, 0x9C, 0x00, 0x78, 0x3E, 0x3E, 0xF0, 0xF0, 0x01, 0xFF, 0xE0, 0x7F, 0xF8,
0x07, 0x9E, 0x7F, 0x33, 0x98, 0x00, 0x78, 0x7F, 0x3E, 0xF1, 0xF8, 0x01, 0xFF, 0xFF, 0xFF, 0xF8,
0x07, 0x9E, 0x7F, 0x33, 0xB8, 0x00, 0x78, 0x7F, 0x3E, 0xF3, 0xFC, 0x01, 0xFF, 0xF0, 0x7F, 0xF8,
0x07, 0xFE, 0xE7, 0x33, 0xB8, 0x00, 0x78, 0x73, 0xBE, 0xF3, 0x9C, 0x01, 0xFF, 0xE0, 0x7F, 0xF8,
0x07, 0xFE, 0xE7, 0x3F, 0xF9, 0xF0, 0x78, 0x73, 0xBE, 0xF3, 0x9C, 0x01, 0xFF, 0xC0, 0x3F, 0xF8,
0x07, 0xFE, 0xE7, 0x3F, 0xF9, 0xF0, 0x78, 0x73, 0xBE, 0xF3, 0x9C, 0x01, 0xF8, 0x00, 0x03, 0xF8,
0x07, 0xFE, 0xE7, 0x3F, 0xF8, 0x00, 0x78, 0x73, 0xBE, 0xF3, 0x9C, 0x01, 0x00, 0x20, 0x40, 0x38,
0x07, 0x9E, 0xE7, 0x3F, 0xF0, 0x00, 0x78, 0x73, 0xBE, 0xF3, 0x9C, 0x01, 0x00, 0x10, 0x80, 0x08,
0x07, 0x9E, 0xE7, 0x1F, 0xF0, 0x00, 0x78, 0x73, 0xBE, 0xF3, 0x9C, 0x01, 0x00, 0x09, 0x00, 0x08,
0x07, 0x9E, 0xE7, 0x1E, 0xF0, 0x00, 0x78, 0x73, 0xBF, 0xF3, 0x9C, 0x01, 0x00, 0x0F, 0x00, 0x08,
0x07, 0x9E, 0xE7, 0x1E, 0xF0, 0x00, 0x78, 0x73, 0xBF, 0xF3, 0x9C, 0x00, 0x80, 0x1F, 0x80, 0x18,
0x07, 0x9E, 0x7F, 0x1E, 0xF0, 0x00, 0x78, 0x7F, 0x3F, 0xE3, 0xFC, 0x00, 0x80, 0x3F, 0xC0, 0x10,
0x07, 0x9E, 0x7E, 0x1E, 0xF0, 0x00, 0x78, 0x3F, 0x3F, 0xC1, 0xF8, 0x00, 0xC0, 0x7F, 0xC0, 0x30,
0x07, 0x9E, 0x1C, 0x1C, 0xE0, 0x00, 0x78, 0x1C, 0x3F, 0x00, 0xF0, 0x00, 0x40, 0xFF, 0xE0, 0x20,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xFF, 0xF0, 0x40,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xF8, 0xC0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xF9, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFE, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFC, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
*/

static const unsigned char PROGMEM logo[] =

/*
{
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFC, 0x00, 0x3F, 0xF8, 0xFF, 0xE3, 0xFC, 0x70, 0x00, 0x1C, 0x7F, 0x00, 0x07, 0xF0, 0xFF, 0x1F,
0xF8, 0x00, 0x1F, 0xF0, 0x7F, 0xE3, 0xFC, 0x70, 0x00, 0x1C, 0x7E, 0x00, 0x03, 0xF0, 0x7F, 0x1F,
0xF8, 0x00, 0x1F, 0xE0, 0x3F, 0xE3, 0xFC, 0x70, 0x00, 0x1C, 0x7E, 0x00, 0x03, 0xF0, 0x3F, 0x1F,
0xF8, 0xFF, 0x1F, 0xE2, 0x3F, 0xE3, 0xFC, 0x7F, 0xC7, 0xFC, 0x7E, 0x3F, 0xE3, 0xF0, 0x1F, 0x1F,
0xF8, 0xFF, 0x1F, 0xC2, 0x1F, 0xE3, 0xFC, 0x7F, 0xC7, 0xFC, 0x7E, 0x3F, 0xE3, 0xF1, 0x0F, 0x1F,
0xF8, 0xFF, 0xFF, 0xC7, 0x1F, 0xE3, 0xFC, 0x7F, 0xC7, 0xFC, 0x7E, 0x3F, 0xE3, 0xF1, 0x87, 0x1F,
0xF8, 0xFF, 0xFF, 0x80, 0x0F, 0xE3, 0xFC, 0x7F, 0xC7, 0xFC, 0x7E, 0x3F, 0xE3, 0xF1, 0xC3, 0x1F,
0xF8, 0xFF, 0x1F, 0x00, 0x07, 0xE3, 0xFC, 0x7F, 0xC7, 0xFC, 0x7E, 0x3F, 0xE3, 0xF1, 0xE1, 0x1F,
0xF8, 0xFF, 0x1F, 0x00, 0x07, 0xE3, 0xFC, 0x7F, 0xC7, 0xFC, 0x7E, 0x3F, 0xE3, 0xF1, 0xF0, 0x1F,
0xF8, 0x00, 0x1E, 0x1F, 0xC3, 0xE0, 0x00, 0x7F, 0xC7, 0xFC, 0x7E, 0x00, 0x03, 0xF1, 0xF8, 0x1F,
0xF8, 0x00, 0x1E, 0x3F, 0xE3, 0xE0, 0x00, 0x7F, 0xC7, 0xFC, 0x7E, 0x00, 0x03, 0xF1, 0xFC, 0x1F,
0xFC, 0x00, 0x3E, 0x3F, 0xE3, 0xF0, 0x00, 0xFF, 0xC7, 0xFC, 0x7F, 0x00, 0x07, 0xF1, 0xFE, 0x1F,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x80, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x03, 0xC0, 0x00, 0x3C, 0x00, 0x00, 0x01, 0xE0, 0x30, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x07, 0xE0, 0x00, 0x7E, 0x00, 0x00, 0x03, 0x38, 0x30, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xE0, 0x00, 0x7F, 0x00, 0xF3, 0x06, 0x18, 0x18, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x1F, 0xF0, 0x00, 0xFF, 0x81, 0x9B, 0x06, 0x18, 0x18, 0xC0, 0x1F, 0xF0, 0x3C, 0x38, 0x73, 0xFE,
0x1F, 0xF0, 0x00, 0xFF, 0x83, 0x0F, 0x06, 0x18, 0x1C, 0x80, 0x1F, 0xF0, 0x3C, 0x1C, 0xE3, 0xFE,
0x3F, 0xF8, 0x01, 0xFF, 0xC3, 0x06, 0x06, 0x30, 0x0D, 0x80, 0x18, 0x30, 0x7E, 0x0F, 0xC3, 0x00,
0x3F, 0xFC, 0x03, 0xFF, 0xC3, 0x06, 0x06, 0xF0, 0x0D, 0x8F, 0x9F, 0xF0, 0x66, 0x07, 0x83, 0xFE,
0x7F, 0xFC, 0x03, 0xFF, 0xE3, 0x06, 0x06, 0x18, 0x0D, 0x0F, 0x9F, 0xF0, 0xFF, 0x03, 0x03, 0xFE,
0x7F, 0xFE, 0x07, 0xFF, 0xE3, 0x06, 0x06, 0x0C, 0x07, 0x00, 0x19, 0xC1, 0xFF, 0x83, 0x00, 0x06,
0x7F, 0xFE, 0x07, 0xFF, 0xE3, 0x0E, 0x06, 0x0C, 0x06, 0x00, 0x18, 0xE1, 0xC3, 0x83, 0x03, 0xFE,
0xFF, 0xFC, 0x03, 0xFF, 0xF1, 0x9E, 0x06, 0x0C, 0x06, 0x00, 0x18, 0x73, 0x81, 0xC3, 0x03, 0xFE,
0xFF, 0xF8, 0xF1, 0xFF, 0xF0, 0xF3, 0x86, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0xF9, 0xF9, 0xFF, 0xF0, 0x00, 0x07, 0x18, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0xF9, 0xF9, 0xFF, 0xF0, 0x00, 0x07, 0xF0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0x08, 0x00, 0x3F, 0xC1, 0xFF, 0x3F, 0xF3, 0xFE, 0x3F, 0xE7, 0xFE, 0x7F, 0xE1, 0xFF,
0x00, 0x01, 0xF8, 0x00, 0x3F, 0xE1, 0xFF, 0x3F, 0xF3, 0xFE, 0x3F, 0xE7, 0xFE, 0x7F, 0xE1, 0xFF,
0x00, 0x03, 0xFC, 0x00, 0x30, 0x71, 0x80, 0x03, 0x03, 0x00, 0x30, 0x60, 0x60, 0x60, 0x61, 0x83,
0x00, 0x07, 0xFE, 0x00, 0x30, 0x31, 0xF8, 0x03, 0x03, 0xF0, 0x30, 0x00, 0x60, 0x60, 0x61, 0xFF,
0x00, 0x07, 0xFE, 0x00, 0x30, 0x31, 0xF8, 0x03, 0x03, 0xF0, 0x30, 0x00, 0x60, 0x60, 0x61, 0xFF,
0x00, 0x0F, 0xFF, 0x00, 0x30, 0x71, 0x80, 0x03, 0x03, 0x00, 0x30, 0x60, 0x60, 0x60, 0x61, 0x9C,
0x00, 0x1F, 0xFF, 0x80, 0x3F, 0xE1, 0xFF, 0x03, 0x03, 0xFE, 0x3F, 0xE0, 0x60, 0x7F, 0xE1, 0x8E,
0x00, 0x3F, 0xFF, 0xC0, 0x3F, 0xC1, 0xFF, 0x03, 0x03, 0xFE, 0x3F, 0xE0, 0x60, 0x7F, 0xE1, 0x87,
0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x7F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x7F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x1F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xE3, 0xBB, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xA2, 0xAA, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xA2, 0xAB, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xA2, 0xA8, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xEB, 0xBB, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};//057
*/
{
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFC, 0x00, 0x3F, 0xF8, 0xFF, 0xE3, 0xFC, 0x70, 0x00, 0x1C, 0x7F, 0x00, 0x07, 0xF0, 0xFF, 0x1F,
0xF8, 0x00, 0x1F, 0xF0, 0x7F, 0xE3, 0xFC, 0x70, 0x00, 0x1C, 0x7E, 0x00, 0x03, 0xF0, 0x7F, 0x1F,
0xF8, 0x00, 0x1F, 0xE0, 0x3F, 0xE3, 0xFC, 0x70, 0x00, 0x1C, 0x7E, 0x00, 0x03, 0xF0, 0x3F, 0x1F,
0xF8, 0xFF, 0x1F, 0xE2, 0x3F, 0xE3, 0xFC, 0x7F, 0xC7, 0xFC, 0x7E, 0x3F, 0xE3, 0xF0, 0x1F, 0x1F,
0xF8, 0xFF, 0x1F, 0xC2, 0x1F, 0xE3, 0xFC, 0x7F, 0xC7, 0xFC, 0x7E, 0x3F, 0xE3, 0xF1, 0x0F, 0x1F,
0xF8, 0xFF, 0xFF, 0xC7, 0x1F, 0xE3, 0xFC, 0x7F, 0xC7, 0xFC, 0x7E, 0x3F, 0xE3, 0xF1, 0x87, 0x1F,
0xF8, 0xFF, 0xFF, 0x80, 0x0F, 0xE3, 0xFC, 0x7F, 0xC7, 0xFC, 0x7E, 0x3F, 0xE3, 0xF1, 0xC3, 0x1F,
0xF8, 0xFF, 0x1F, 0x00, 0x07, 0xE3, 0xFC, 0x7F, 0xC7, 0xFC, 0x7E, 0x3F, 0xE3, 0xF1, 0xE1, 0x1F,
0xF8, 0xFF, 0x1F, 0x00, 0x07, 0xE3, 0xFC, 0x7F, 0xC7, 0xFC, 0x7E, 0x3F, 0xE3, 0xF1, 0xF0, 0x1F,
0xF8, 0x00, 0x1E, 0x1F, 0xC3, 0xE0, 0x00, 0x7F, 0xC7, 0xFC, 0x7E, 0x00, 0x03, 0xF1, 0xF8, 0x1F,
0xF8, 0x00, 0x1E, 0x3F, 0xE3, 0xE0, 0x00, 0x7F, 0xC7, 0xFC, 0x7E, 0x00, 0x03, 0xF1, 0xFC, 0x1F,
0xFC, 0x00, 0x3E, 0x3F, 0xE3, 0xF0, 0x00, 0xFF, 0xC7, 0xFC, 0x7F, 0x00, 0x07, 0xF1, 0xFE, 0x1F,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x80, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x03, 0xC0, 0x00, 0x3C, 0x00, 0x00, 0x01, 0xE0, 0x30, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x07, 0xE0, 0x00, 0x7E, 0x00, 0x00, 0x03, 0x38, 0x30, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xE0, 0x00, 0x7F, 0x00, 0xF3, 0x06, 0x18, 0x18, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x1F, 0xF0, 0x00, 0xFF, 0x81, 0x9B, 0x06, 0x18, 0x18, 0xC0, 0x1F, 0xF0, 0x3C, 0x38, 0x73, 0xFE,
0x1F, 0xF0, 0x00, 0xFF, 0x83, 0x0F, 0x06, 0x18, 0x1C, 0x80, 0x1F, 0xF0, 0x3C, 0x1C, 0xE3, 0xFE,
0x3F, 0xF8, 0x01, 0xFF, 0xC3, 0x06, 0x06, 0x30, 0x0D, 0x80, 0x18, 0x30, 0x7E, 0x0F, 0xC3, 0x00,
0x3F, 0xFC, 0x03, 0xFF, 0xC3, 0x06, 0x06, 0xF0, 0x0D, 0x8F, 0x9F, 0xF0, 0x66, 0x07, 0x83, 0xFE,
0x7F, 0xFC, 0x03, 0xFF, 0xE3, 0x06, 0x06, 0x18, 0x0D, 0x0F, 0x9F, 0xF0, 0xFF, 0x03, 0x03, 0xFE,
0x7F, 0xFE, 0x07, 0xFF, 0xE3, 0x06, 0x06, 0x0C, 0x07, 0x00, 0x19, 0xC1, 0xFF, 0x83, 0x00, 0x06,
0x7F, 0xFE, 0x07, 0xFF, 0xE3, 0x0E, 0x06, 0x0C, 0x06, 0x00, 0x18, 0xE1, 0xC3, 0x83, 0x03, 0xFE,
0xFF, 0xFC, 0x03, 0xFF, 0xF1, 0x9E, 0x06, 0x0C, 0x06, 0x00, 0x18, 0x73, 0x81, 0xC3, 0x03, 0xFE,
0xFF, 0xF8, 0xF1, 0xFF, 0xF0, 0xF3, 0x86, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0xF9, 0xF9, 0xFF, 0xF0, 0x00, 0x07, 0x18, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0xF9, 0xF9, 0xFF, 0xF0, 0x00, 0x07, 0xF0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0x08, 0x00, 0x3F, 0xC1, 0xFF, 0x3F, 0xF3, 0xFE, 0x3F, 0xE7, 0xFE, 0x7F, 0xE1, 0xFF,
0x00, 0x01, 0xF8, 0x00, 0x3F, 0xE1, 0xFF, 0x3F, 0xF3, 0xFE, 0x3F, 0xE7, 0xFE, 0x7F, 0xE1, 0xFF,
0x00, 0x03, 0xFC, 0x00, 0x30, 0x71, 0x80, 0x03, 0x03, 0x00, 0x30, 0x60, 0x60, 0x60, 0x61, 0x83,
0x00, 0x07, 0xFE, 0x00, 0x30, 0x31, 0xF8, 0x03, 0x03, 0xF0, 0x30, 0x00, 0x60, 0x60, 0x61, 0xFF,
0x00, 0x07, 0xFE, 0x00, 0x30, 0x31, 0xF8, 0x03, 0x03, 0xF0, 0x30, 0x00, 0x60, 0x60, 0x61, 0xFF,
0x00, 0x0F, 0xFF, 0x00, 0x30, 0x71, 0x80, 0x03, 0x03, 0x00, 0x30, 0x60, 0x60, 0x60, 0x61, 0x9C,
0x00, 0x1F, 0xFF, 0x80, 0x3F, 0xE1, 0xFF, 0x03, 0x03, 0xFE, 0x3F, 0xE0, 0x60, 0x7F, 0xE1, 0x8E,
0x00, 0x3F, 0xFF, 0xC0, 0x3F, 0xC1, 0xFF, 0x03, 0x03, 0xFE, 0x3F, 0xE0, 0x60, 0x7F, 0xE1, 0x87,
0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x7F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x7F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x1F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xE3, 0xBB, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xA2, 0xA9, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xA2, 0xA9, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xA2, 0xA9, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xEB, 0xBB, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

 };//015


static const unsigned char PROGMEM fl[] =
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

static const unsigned char PROGMEM bt1[] =
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


unsigned long counts;     //GM Tube事件的变量
unsigned long counts1;
unsigned long counts2;
unsigned long counts3;
unsigned long cpm;      //CPM的变量
unsigned long cpm1;      //波形CPM的变量
//unsigned long usv;
//unsigned long usv;
//unsigned long y;
unsigned int multiplier;  //此草图中用于计算CPM的变量
unsigned int multiplier1; //波形 CPM的变量
unsigned long previousMillis;  //时间测量的变量
unsigned long previousMillis1 = 0; 
const long interval = 40000;
const long interval1 = 500; 
float usv = 0;
float msv = 0;

int bt = 0;
int s1 = 0;
int pbt = 0;
//int a = 0;
//unsigned long digits = 3 ;  //小数位数

  
unsigned long CR = 0;

void tube_impulse(){       //用于从Geiger Kit捕获事件的子程序
  counts++;
  counts1++;
}

float input_voltage = 0.0;	//输入电压

Bounce bouncer = Bounce();

byte count;				//计数
byte sensorArray[128];  //传感器阵列?
byte drawHeight;		//画高度?
int ms = 0;

char filled = 'f'; //决定填充或点显示（F/D =点，任何其他填充）
char drawDirection = 'L'; //从右到左决定绘图方向（R/L =从左到右，从右到左的任何其他）
char slope = 'W'; //填充模式的斜率颜色白色或黑色斜率（W =白色，其他任何黑色。嗯，白色在此显示中是蓝色但你明白了）

//进度条变量
int p2 = random(0, 100);
//int counts1 = random(0, 32);


void drawPercentbar(int x, int y, int width, int height, int progress)
{

	progress = progress > 100 ? 100 : progress;
	progress = progress < 0 ? 0 : progress;

	float bar = ((float)(width - 4) / 100) * progress;

	display.drawRect(x, y, width, height, WHITE);
	display.fillRect(x + 2, y + 2, bar, height - 4, WHITE);

	// 显示进度文本
	if (height >= 11) {
		display.setCursor(72,55);
		//display.setCursor(0, 57);
		display.setTextSize(1);
		display.setTextColor(WHITE);
		if (progress >= 50)
			display.setTextColor(BLACK); // '倒'文字

		display.print(progress);
		display.print("%");
	}
}


void setup(){             //设置子程序
  counts = 0;
  counts1 = 0;
  
  cpm = 0;
  cpm1 = 0;
  multiplier = MAX_PERIOD / LOG_PERIOD;      //计算乘数，取决于您的日志周期 60/15
  multiplier1 = MAX_PERIOD1 / LOG_PERIOD1;	//波形周期
  Serial.begin(9600);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // 初始化OLED并将I2C地址设置为0x3C（对于128x32 OLED）

 for (count = 0; count <= 128; count++) //零所有元素
  {
    sensorArray[count] = 0;
  }
  
  //display.display();
  
  //display.clearDisplay();
  //display.setCursor(36, 42);
  //display.setTextColor(WHITE); //“inverted”的文字
  //display.print(">Initialising..");//输出“INITIALISING .....”以显示
 
  //display.clearDisplay();
  
  //display.drawBitmap(0, 0, logo, 128, 64, WHITE); //开机画面
  //delay(1200);
  display.display();
  
  
  /*
  for (int p2 = 0; p2 <= 100; p2++)
  {
	  display.clearDisplay();
	  display.drawBitmap(0, 0, logo, 128, 64, WHITE); //开机画面

	  drawPercentbar(30, 53, 98, 11, p2);

	  display.display();

	  p2++;

	  //if (p2 > 100) p2 = 0;

	  delay(35);   //进度条速度

  }
  */
  
  
  display.clearDisplay();

  analogWrite(9,22 );

  
  attachInterrupt(0, tube_impulse, FALLING); //定义外部中断
      Serial.println("Start counter");

bouncer .interval(5); // 设置参数间隔 = 5 ms
 
}

void loop(){                                 //主程序
  unsigned long currentMillis = millis(); //返回一个值‘该值代表当前cpu的时间’单位为微秒
   unsigned long currentMillis1 = millis();
   unsigned long digits = 3;
   unsigned long digits1 = 3;
   int range = 5048;  //波形取值范围
   //0.0057=32
   //0.0015=122
   //double usv;

if (bouncer.update())
 { //如果发生了事件
  if (bouncer.read()==0)
  { bt++;
  }
}

  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    CR = bt;
    bt = 0;
  }

  if (bt != pbt) {
    pbt = bt;
    s1 = 1;
}
   //当前cpu时间 - 之前cpu时间 >= 记录周期
  if(currentMillis - previousMillis >= LOG_PERIOD){
    previousMillis = currentMillis;
    cpm = counts * multiplier;
	
	usv = (cpm*CONV_FACTOR);
	msv = (cpm*CONV_FACTOR)/1000;
	//usv = (cpm*CONV_FACTOR);
	//usv = 99;
  //  y=counts*0.3;
    
	char   c[1];
    dtostrf(usv,1,2,c);
    Serial.println(c);
    
    Serial.println(cpm);
    counts = 0;
	//counts1 = 0;
  }
  
  //cpm波形Y值
  if (currentMillis - previousMillis >= LOG_PERIOD1) {
	  cpm1 = counts1 * multiplier1; //波形cpm1
	  Serial.println(cpm1);
	  --cpm1;
	  
	  
	  counts1 = 0;
  }

  if (usv >= 10 && usv <= 99){
	  digits = 2;
  }
  if (msv >= 10 && msv <= 99) {
	  digits1 = 2;
  }

//  else {
//	  digits = 2;
// }
  
 
//电压表 PIN A3
 int analog_value = analogRead(A3);
   input_voltage = (analog_value * 5.0) / 1024.0; 

   
   if (input_voltage < 0.1) 
   {
     input_voltage=0.0;
   } 

   //超量报警
   if (usv >= 0.52){
	   digitalWrite(13, HIGH);

	   delay(30);

	   digitalWrite(13, LOW);
   }
   


   

//辐射图标和BUZZER
if (counts == 1){
      //display.drawBitmap(-10, 0, lcd_bmp, 128, 32, WHITE);
    digitalWrite (7, HIGH); // buzzer ON
}

else

{
    digitalWrite (7, LOW); // buzzer OFF
}

 if (currentMillis1 - previousMillis1 >= interval1) {
    previousMillis1 = currentMillis1;    
    if (s1 == 1){
      s1=0;
    }
  }
 
 //等待采样第一次usv结束 进度条 开机画面
 
 if (cpm <= 0) {
	 for (int p2 = 0;  p2 <= 100; p2++)
	 {
		 display.clearDisplay();
		 display.drawBitmap(0, 0, logo, 128, 64, WHITE); //开机画面

		 drawPercentbar(30, 53, 98, 11, p2);

		 display.display();

		 //p2++; //一次加2

		 delay(160);   //进度条速度
					   // if (p2 > 100) p2 = 0;
		 //break;
	 }
 }
 
 display.clearDisplay();             //清除缓冲区
 if (usv >= 100) {


	 display.setTextSize(2);
	 display.setCursor(0, 50);
	 display.print(msv, digits1);

	 display.setTextSize(2);
	 display.setTextColor(WHITE);
	 display.setCursor(68, 50);
	 display.println("mSv/h");
 }
 else {
	 display.setTextSize(2);
	 display.setCursor(0, 50);
	 display.print(usv, digits);

	 display.setTextSize(2);
	 display.setTextColor(WHITE);
	 display.setCursor(68, 50);
	 display.println("uSv/h");
 }
   
  //display.print(%usv.usvf, 10, 4, 123.3);
    display.setCursor(40,50);
  display.println();
  display.setTextSize(2);
  display.setCursor(68,35);
  display.println("CPM");

  display.setTextSize(2);           //文本大小设置
  display.setTextColor(WHITE);      
  display.setCursor(0,35);           //文本起始位置（列，行）
  display.println(cpm);             //输出“ ”来显示

          


//电池指示

display.drawBitmap(0, 0, fl, 128, 32, WHITE);

if (input_voltage > 3.3) {
  display.drawBitmap(0, 0, bt1, 128, 32, WHITE);
  if (input_voltage > 3.4) {
    display.drawBitmap(0, -5, bt1, 128, 32, WHITE);
    if (input_voltage > 3.5) {
      display.drawBitmap(0, -10, bt1, 128, 32, WHITE);
       if (input_voltage > 3.6) {
        display.drawBitmap(0, -15, bt1, 128, 32, WHITE);
        if (input_voltage > 3.8) {
          display.drawBitmap(0, -20, bt1, 128, 32, WHITE);
        }
      }
    }
  }
}
 

drawHeight = map( cpm1 , 0, range , 0, 32 );
  sensorArray[0] = drawHeight;

 
  /*
	  for (int counts1 = 1; counts1 <= 0; --counts1) {
		  --counts1;
		  delay(50);
	  }
	*/
 
  for (count = 1; count <= 80; count++ )  //波形起始结束宽度
  {
    if (filled == 'D' || filled == 'd')
    {
      if (drawDirection == 'L' || drawDirection == 'l')
      {
        display.drawPixel(count, 32 - sensorArray[count - 1], WHITE);
		delay(ms);
      }
      else //否则，从右到左画点
      {
        display.drawPixel(80 - count, 32 - sensorArray[count - 1], WHITE);
		delay(ms);
      }
	  
    }
	

    

    else
    {
      if (drawDirection == 'L' || drawDirection == 'l')
      {
        if (slope == 'W' || slope == 'w')
        {																			//drawline(xx1,y1,xx2,y2,0) 画线函数
          display.drawLine(count, 32, count, 32 - sensorArray[count - 1], WHITE);  //在(x,y)平面，画从点A=(x1,Y1) 到点B=(x2,y2)的直线段
		  delay(ms);
		}
        else
        {
          display.drawLine(count, 1, count, 32 - sensorArray[count - 1], WHITE);
		  delay(ms);
        }
      }



      else
      {
        if (slope == 'W' || slope == 'w')
        {
          display.drawLine(80 - count, 32, 80 - count, 32 - sensorArray[count - 1], WHITE);
		  delay(ms);
		}
        else
        {
          display.drawLine(80 - count, 1, 80 - count, 32 - sensorArray[count - 1], WHITE);
		  delay(ms);
		}
      }
    }
  }

  drawAxises();
  display.display();  //在显示任何内容之前需要
  display.clearDisplay(); //在新绘图之前清除

  for (count = 80; count >= 2; count--) // 从160到2
  {
    sensorArray[count - 1] = sensorArray[count - 2];
  
  }

}

void drawAxises()  //分开以保持整洁。 这仅控制绘图背景！
{
  display.setCursor(85, 0);
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.println(counts,DEC);
  display.setCursor(90, 18);
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.print("CP");

  //波形外框

  display.drawLine(0, 0, 0, 32, WHITE);
  display.drawLine(80, 0, 80, 32, WHITE);

  for (count = 0; count < 40; count += 10)
  {
    display.drawLine(80, count, 75, count, WHITE);
    display.drawLine(0, count, 5, count, WHITE);
  }

  for (count = 10; count < 80; count += 10)
  {
    display.drawPixel(count, 0 , WHITE);
    //display.drawPixel(count, 10 , WHITE);
  }
  
  display.display();  
   // delay(1000);                        //短暂的延迟(1/ms)
  //display.clearDisplay();             //清晰的显示          
}




